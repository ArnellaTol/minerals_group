import streamlit as st
import pandas as pd
import pickle 

from sklearn.preprocessing import MultiLabelBinarizer

st.set_page_config(
    page_title="Mineral group classification",
)



# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state
if 'df' not in st.session_state:
    st.session_state['df'] = pd.DataFrame()

if 'answer' not in st.session_state:
    st.session_state['answer'] = 0

if 'probability' not in st.session_state:
    st.session_state['probability'] = []

def reset_session_state():
    st.session_state['df'] = pd.DataFrame()
    st.session_state['answer'] = 0
    st.session_state['probability'] = []


# ML section start
other_column = ['cleavage']
columns_binarize = ['color', 'streak', 'lustre', 'transparency', 'fracture']
columns_range = ['mohs_hardness', 'density']

colors = {
    '–ë–µ–ª—ã–π': 1,
    '–ß–µ—Ä–Ω—ã–π': 2,
    '–°–µ—Ä—ã–π': 3,
    '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π': 4,
    '–ö—Ä–∞—Å–Ω—ã–π': 5,
    '–û—Ä–∞–Ω–∂–µ–≤—ã–π': 6,
    '–ñ–µ–ª—Ç—ã–π': 7,
    '–ó–µ–ª–µ–Ω—ã–π': 8,
    '–ì–æ–ª—É–±–æ–π': 9,
    '–°–∏–Ω–∏–π': 10,
    '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π': 11,
    '–†–æ–∑–æ–≤—ã–π': 12,
    '–ë–µ—Å—Ü–≤–µ—Ç–Ω—ã–π': 13
}

lustres = {
    '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π': 1,
    '–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π': 2,
    '–ê–ª–º–∞–∑–Ω—ã–π': 3,
    '–ü–µ—Ä–ª–∞–º—É—Ç—Ä–æ–≤—ã–π': 4,
    '–®–µ–ª–∫–æ–≤–∏—Å—Ç—ã–π': 5,
    '–ñ–∏—Ä–Ω—ã–π': 6,
    '–í–æ—Å–∫–æ–≤—ã–π': 7,
    '–ú–∞—Ç–æ–≤—ã–π': 8
}

transparency = {
    '–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π': 1,
    '–ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π': 2,
    '–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π': 3
}

fractures = {
    '–†–æ–≤–Ω—ã–π': 1,
    '–ù–µ—Ä–æ–≤–Ω—ã–π': 2,
    '–°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π': 3,
    '–ó–∞–Ω–æ–∑–∏—Å—Ç—ã–π': 4,
    '–ò–≥–æ–ª—å—á–∞—Ç—ã–π': 5,
    '–†–∞–∫–æ–≤–∏—Å—Ç—ã–π': 6,
    '–ó–µ—Ä–Ω–∏—Å—Ç—ã–π': 7,
    '–ó–µ–º–ª–∏—Å—Ç—ã–π': 8
}

cleavage = {
    '–í–µ—Å—å–º–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è': 1,
    '–°–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è': 2,
    '–°—Ä–µ–¥–Ω—è—è': 3,
    '–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è': 4,
    '–í–µ—Å—å–º–∞ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è': 5,
    '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç': 6
}

groups = {
    1: '–°–∏–ª–∏–∫–∞—Ç—ã',
    2: '–§–æ—Å—Ñ–∞—Ç—ã',
    3: '–ö–∞—Ä–±–æ–Ω–∞—Ç—ã',
    4: '–û–∫–∏—Å–ª—ã (–æ–∫—Å–∏–¥—ã)',
    5: '–°—É–ª—å—Ñ–∏–¥—ã (–¥–∏—Å—É–ª—å—Ñ–∏–¥—ã)',
    6: '–°—É–ª—å—Ñ–∞—Ç—ã',
    7: '–ì–∞–ª–æ–≥–µ–Ω–∏–¥—ã',
    8: '–°–∞–º–æ—Ä–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
}

model_file_path = 'lr_model_mineral_group_prediction.sav'
model = pickle.load(open(model_file_path, 'rb'))


class NumericRange:
    def __init__(self, start, end=None):
        self.start = float(start)
        self.end = float(end) if end is not None else self.start
        self.mean = (self.start + self.end) / 2
        self.range = self.end - self.start

    def __repr__(self):
        return f'{self.start}-{self.end}' if self.start != self.end else str(self.start)

def parse_numeric_range(value):
    parts = value.split('-')
    if len(parts) == 2:
        return NumericRange(parts[0], parts[1])
    else:
        return NumericRange(parts[0])
    

def apply_mlb(df, column, all_values):
    mlb = MultiLabelBinarizer(classes=all_values)
    transformed_data = mlb.fit_transform(df[column])
    transformed_df = pd.DataFrame(transformed_data, columns=[f"{column}_{cls}" for cls in mlb.classes_])
    return transformed_df

@st.cache_data
def predict_group(df):
    df_colors = apply_mlb(df, 'color', [1,2,3,4,5,6,7,8,9,10,11,12,13])
    df_streaks = apply_mlb(df, 'streak', [1,2,3,4,5,6,7,8,9,10,11,12,13])
    df_lustres = apply_mlb(df, 'lustre', [1,2,3,4,5,6,7,8])
    df_transparencies = apply_mlb(df, 'transparency', [1,2,3])
    df_fractures = apply_mlb(df, 'fracture', [1,2,3,4,5,6,7,8])
    df = pd.concat([df, df_colors, df_streaks, df_lustres, df_transparencies, df_fractures], axis=1)
    df.drop(['color', 'streak', 'lustre', 'transparency', 'fracture'], axis=1, inplace=True)

    df['mohs_hardness'] = df['mohs_hardness'].apply(parse_numeric_range)

    df['mohs_hardness_start'] = df['mohs_hardness'].apply(lambda x: x.start)
    df['mohs_hardness_end'] = df['mohs_hardness'].apply(lambda x: x.end)
    df['mohs_hardness_mean'] = df['mohs_hardness'].apply(lambda x: x.mean)
    df['mohs_hardness_range'] = df['mohs_hardness'].apply(lambda x: x.range)

    df.drop('mohs_hardness', axis=1, inplace=True)

    df['density'] = df['density'].apply(parse_numeric_range)

    df['density_start'] = df['density'].apply(lambda x: x.start)
    df['density_end'] = df['density'].apply(lambda x: x.end)
    df['density_mean'] = df['density'].apply(lambda x: x.mean)
    df['density_range'] = df['density'].apply(lambda x: x.range)

    df.drop('density', axis=1, inplace=True)

    answer = model.predict(df)
    probability = model.predict_proba(df)

    return answer, probability[0]


st.title('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –º–∏–Ω–µ—Ä–∞–ª–∞ –ø–æ –µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò')
st.subheader('üóÇ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')
selected_text_colors = st.multiselect('–¶–≤–µ—Ç(-–∞) –º–∏–Ω–µ—Ä–∞–ª–∞:', list(colors.keys()))
selected_text_streak = st.multiselect('–¶–≤–µ—Ç(-–∞) —á–µ—Ä—Ç—ã:', list(colors.keys()))
selected_text_lustre = st.multiselect('–ë–ª–µ—Å–∫:', list(lustres.keys()))
selected_text_transparency = st.multiselect('–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:', list(transparency.keys()))
selected_text_fracture = st.multiselect('–ò–∑–ª–æ–º:', list(fractures.keys()))
selected_text_cleavage = st.selectbox('–°–ø–∞–π–Ω–æ—Å—Ç—å:', list(cleavage.keys()))

mohs_hardness_input = st.text_input('–¢–≤–µ—Ä–¥–æ—Å—Ç—å –ø–æ —à–∫–∞–ª–µ –ú–æ–æ—Å–∞:', placeholder='1.5-2.0', help='–í–≤–æ–¥ –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤!!\n–î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ "-"\n–î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –¥—Ä–æ–±–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ —Ç–æ—á–∫–∏ "." –ù–ï –∑–∞–ø—è—Ç–æ–π ","!!')
density_input = st.text_input('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ –≥/—Å–º¬≥:', placeholder='5.67-5.76', help='–í–≤–æ–¥ –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤!!\n–î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ "-"\n–î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –¥—Ä–æ–±–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ —Ç–æ—á–∫–∏ "." –ù–ï –∑–∞–ø—è—Ç–æ–π ","!!')



selected_colors = [colors[i] for i in selected_text_colors]
selected_streak = [colors[i] for i in selected_text_streak]
selected_lustre = [lustres[i] for i in selected_text_lustre]
selected_transparency = [transparency[i] for i in selected_text_transparency]
selected_fracture = [fractures[i] for i in selected_text_fracture]
selected_cleavage = int(cleavage[selected_text_cleavage])



prediction_button = st.button('–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', type='primary', use_container_width=True, key='button')
            
if prediction_button:

    st.session_state['df'] = pd.DataFrame({
        'color': [selected_colors], 
        'streak': [selected_streak], 
        'lustre': [selected_lustre], 
        'transparency': [selected_transparency], 
        'cleavage': int(selected_cleavage), 
        'mohs_hardness': str(mohs_hardness_input), 
        'density': str(density_input), 
        'fracture': [selected_fracture]
    }, index=[0])

    st.session_state['answer'], st.session_state['probability'] = predict_group(st.session_state['df'])

    st.subheader('–û—Ç–≤–µ—Ç:')
    st.write(groups[int(st.session_state['answer'])])

    st.subheader('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:')
    for i in range(0,8):
        st.write(f"{groups[i+1]} - {float(round(st.session_state['probability'][i], 5))*100}%")
